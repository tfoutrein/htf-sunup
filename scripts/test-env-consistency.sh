#!/bin/bash

# Script pour tester la coh√©rence des fichiers d'environnement
# Usage: ./scripts/test-env-consistency.sh

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier la coh√©rence entre les fichiers .env
log "V√©rification de la coh√©rence des fichiers d'environnement..."

# V√©rifier que .env.example a Facebook activ√©
if grep -q "FACEBOOK_AUTH_ENABLED=true" .env.example; then
    success "‚úÖ .env.example: Facebook activ√©"
else
    error "‚ùå .env.example: Facebook devrait √™tre activ√©"
fi

if grep -q "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED=true" .env.example; then
    success "‚úÖ .env.example: Frontend Facebook activ√©"
else
    error "‚ùå .env.example: Frontend Facebook devrait √™tre activ√©"
fi

# V√©rifier que scripts/configs/.env.docker.test a Facebook d√©sactiv√©
if grep -q "FACEBOOK_AUTH_ENABLED=false" scripts/configs/.env.docker.test; then
    success "‚úÖ scripts/configs/.env.docker.test: Facebook d√©sactiv√©"
else
    error "‚ùå scripts/configs/.env.docker.test: Facebook devrait √™tre d√©sactiv√©"
fi

if grep -q "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED=false" scripts/configs/.env.docker.test; then
    success "‚úÖ scripts/configs/.env.docker.test: Frontend Facebook d√©sactiv√©"
else
    error "‚ùå scripts/configs/.env.docker.test: Frontend Facebook devrait √™tre d√©sactiv√©"
fi

# V√©rifier que tous les fichiers .env ont les m√™mes variables Facebook
log "V√©rification des variables Facebook dans tous les fichiers..."

FACEBOOK_VARS=(
    "FACEBOOK_AUTH_ENABLED"
    "FACEBOOK_APP_ID"
    "FACEBOOK_APP_SECRET"
    "FACEBOOK_CALLBACK_URL"
    "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED"
)

ENV_FILES=(
    ".env.example"
    "scripts/configs/.env.docker.test"
    "apps/backend/.env.example"
    "apps/frontend/.env.local.example"
)

for file in "${ENV_FILES[@]}"; do
    if [ -f "$file" ]; then
        log "V√©rification de $file..."
        for var in "${FACEBOOK_VARS[@]}"; do
            if grep -q "$var" "$file"; then
                success "  ‚úÖ $var pr√©sente"
            else
                # Certaines variables peuvent ne pas √™tre dans tous les fichiers
                if [[ "$file" == *"backend"* && "$var" == "NEXT_PUBLIC_"* ]]; then
                    # Variable frontend dans fichier backend - OK
                    continue
                elif [[ "$file" == *"frontend"* && "$var" != "NEXT_PUBLIC_"* ]]; then
                    # Variable backend dans fichier frontend - OK si pas JWT_SECRET
                    continue
                else
                    warning "  ‚ö†Ô∏è $var manquante dans $file"
                fi
            fi
        done
    else
        warning "‚ö†Ô∏è $file n'existe pas"
    fi
done

# V√©rifier que docker-compose.yml utilise les bonnes variables
log "V√©rification de docker-compose.yml..."

COMPOSE_VARS=(
    "FACEBOOK_AUTH_ENABLED"
    "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED"
    "FACEBOOK_APP_ID"
    "FACEBOOK_APP_SECRET"
)

for var in "${COMPOSE_VARS[@]}"; do
    if grep -q "\${$var}" docker-compose.yml; then
        success "‚úÖ docker-compose.yml utilise \${$var}"
    else
        error "‚ùå docker-compose.yml n'utilise pas \${$var}"
    fi
done

# V√©rifier que les valeurs par d√©faut sont coh√©rentes
log "V√©rification des valeurs par d√©faut..."

# Test avec .env.example
if grep -q "FACEBOOK_AUTH_ENABLED=true" .env.example && grep -q "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED=true" .env.example; then
    success "‚úÖ .env.example: Backend et frontend Facebook coh√©rents (tous deux activ√©s)"
else
    error "‚ùå .env.example: Backend et frontend Facebook incoh√©rents"
fi

# Test avec scripts/configs/.env.docker.test
if grep -q "FACEBOOK_AUTH_ENABLED=false" scripts/configs/.env.docker.test && grep -q "NEXT_PUBLIC_FACEBOOK_AUTH_ENABLED=false" scripts/configs/.env.docker.test; then
    success "‚úÖ scripts/configs/.env.docker.test: Backend et frontend Facebook coh√©rents (tous deux d√©sactiv√©s)"
else
    error "‚ùå scripts/configs/.env.docker.test: Backend et frontend Facebook incoh√©rents"
fi

# R√©sum√©
success "üéâ Tests de coh√©rence termin√©s !"
log ""
log "üìã Tous les fichiers d'environnement sont configur√©s correctement pour:"
log "- Facebook activ√©: .env.example"
log "- Facebook d√©sactiv√©: scripts/configs/.env.docker.test"
log "- docker-compose.yml utilise les bonnes variables" 