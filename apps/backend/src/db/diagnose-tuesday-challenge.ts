import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { campaigns, challenges, actions } from './schema';
import { eq } from 'drizzle-orm';

async function diagnoseTuesdayChallenge(databaseUrl: string) {
  console.log('üîç DIAGNOSTIC SP√âCIFIQUE - D√âFI DU MARDI 08 JUILLET 2025');
  console.log('='.repeat(70));
  console.log(
    `üåê Connexion √†: ${databaseUrl.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`,
  );
  console.log('');

  const client = postgres(databaseUrl, {
    ssl: { rejectUnauthorized: false },
  });
  const db = drizzle(client);

  try {
    // 1. Trouver le d√©fi du mardi 08 juillet 2025
    console.log('üéØ RECHERCHE DU D√âFI DU MARDI:');

    const tuesdayChallenge = await db
      .select()
      .from(challenges)
      .where(eq(challenges.date, '2025-07-08'));

    if (tuesdayChallenge.length === 0) {
      console.log('‚ùå Aucun d√©fi trouv√© pour le 08/07/2025');
      return;
    }

    const challenge = tuesdayChallenge[0];
    console.log(`‚úÖ D√©fi trouv√©:`);
    console.log(`   ID: ${challenge.id}`);
    console.log(`   Titre: ${challenge.title}`);
    console.log(`   Date: ${challenge.date}`);
    console.log(`   Campagne ID: ${challenge.campaignId}`);
    console.log('');

    // 2. R√©cup√©rer toutes les actions de ce d√©fi
    console.log('üìã ACTIONS ACTUELLES DU D√âFI:');

    const challengeActions = await db
      .select()
      .from(actions)
      .where(eq(actions.challengeId, challenge.id))
      .orderBy(actions.order);

    if (challengeActions.length === 0) {
      console.log('‚ùå Aucune action trouv√©e pour ce d√©fi');
    } else {
      console.log(`‚úÖ ${challengeActions.length} action(s) trouv√©e(s):`);
      challengeActions.forEach((action, index) => {
        console.log(
          `   ${index + 1}. Position ${action.order}: "${action.title}" (ID: ${action.id})`,
        );
        console.log(`      Type: ${action.type}`);
        console.log(
          `      Description: ${action.description || 'Aucune description'}`,
        );
        console.log(`      Cr√©√©e le: ${action.createdAt}`);
        console.log(`      Mise √† jour: ${action.updatedAt}`);
        console.log('');
      });
    }

    // 3. Analyser les positions
    console.log('üìä ANALYSE DES POSITIONS:');

    const positions = challengeActions.map((a) => a.order);
    const uniquePositions = [...new Set(positions)];
    const duplicatePositions = positions.filter(
      (pos, index) => positions.indexOf(pos) !== index,
    );

    console.log(`   Positions utilis√©es: [${positions.join(', ')}]`);
    console.log(`   Positions uniques: [${uniquePositions.join(', ')}]`);

    if (duplicatePositions.length > 0) {
      console.log(
        `   üö® CONFLITS D√âTECT√âS: Positions dupliqu√©es [${[...new Set(duplicatePositions)].join(', ')}]`,
      );

      // D√©tailler les conflits
      const conflictPositions = [...new Set(duplicatePositions)];
      conflictPositions.forEach((pos) => {
        const conflictingActions = challengeActions.filter(
          (a) => a.order === pos,
        );
        console.log(
          `      Position ${pos} occup√©e par ${conflictingActions.length} actions:`,
        );
        conflictingActions.forEach((action) => {
          console.log(`        - ID ${action.id}: "${action.title}"`);
        });
      });
    } else {
      console.log(`   ‚úÖ Aucun conflit de position`);
    }

    // 4. Positions disponibles
    console.log('');
    console.log('üîç DISPONIBILIT√â DES POSITIONS (1-6):');

    for (let pos = 1; pos <= 6; pos++) {
      const actionsAtPosition = challengeActions.filter((a) => a.order === pos);
      if (actionsAtPosition.length === 0) {
        console.log(`   Position ${pos}: ‚úÖ LIBRE`);
      } else if (actionsAtPosition.length === 1) {
        console.log(
          `   Position ${pos}: ‚ùå Occup√©e par "${actionsAtPosition[0].title}"`,
        );
      } else {
        console.log(
          `   Position ${pos}: üö® CONFLIT - ${actionsAtPosition.length} actions`,
        );
      }
    }

    // 5. Recommandations
    console.log('');
    console.log('üí° RECOMMANDATIONS:');

    const freePositions = [];
    for (let pos = 1; pos <= 6; pos++) {
      if (!positions.includes(pos)) {
        freePositions.push(pos);
      }
    }

    if (freePositions.length > 0) {
      console.log(
        `   ‚úÖ Positions libres disponibles: [${freePositions.join(', ')}]`,
      );
      console.log(
        `   ‚Üí Vous pouvez ajouter une nouvelle action √† la position ${freePositions[0]}`,
      );
    } else {
      console.log(`   ‚ùå Aucune position libre (toutes occup√©es)`);
      console.log(`   ‚Üí Vous devez supprimer une action existante d'abord`);
    }

    if (duplicatePositions.length > 0) {
      console.log(
        `   üîß Conflits √† r√©soudre: ${[...new Set(duplicatePositions)].length} position(s)`,
      );
      console.log(`   ‚Üí Utilisez le script de correction automatique`);
    }

    // 6. Simulation de l'erreur que vous rencontrez
    console.log('');
    console.log("üß™ SIMULATION DE L'ERREUR:");

    if (positions.includes(2)) {
      console.log(
        `   ‚ùå Position 2 d√©j√† occup√©e par: "${challengeActions.find((a) => a.order === 2)?.title}"`,
      );
      console.log(
        `   ‚Üí C'est pourquoi vous obtenez l'erreur "Une action existe d√©j√† √† la position 2"`,
      );
      console.log(
        `   ‚Üí Le frontend essaie probablement d'assigner automatiquement la position 2`,
      );
    } else {
      console.log(`   ‚úÖ Position 2 libre - pas d'erreur attendue`);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    await client.end();
  }
}

// R√©cup√©rer l'URL depuis les arguments de ligne de commande
const args = process.argv.slice(2);
const databaseUrl = args[0];

if (!databaseUrl) {
  console.log('‚ùå Usage: npx tsx diagnose-tuesday-challenge.ts <DATABASE_URL>');
  process.exit(1);
}

// Ex√©cuter le diagnostic
diagnoseTuesdayChallenge(databaseUrl).catch(console.error);
